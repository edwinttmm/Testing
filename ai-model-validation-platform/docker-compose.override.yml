# Docker Compose Override for Development
# This file provides development-specific overrides and networking fixes

services:
  postgres:
    # Enhanced logging for debugging
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "log_destination=stderr", 
      "-c", "logging_collector=off",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "log_hostname=on",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB"
    ]
    # Development environment variables
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vru_validation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    # Extended health check for development
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vru_validation} && psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vru_validation} -c 'SELECT 1;'"]
      interval: 5s
      timeout: 10s
      retries: 12
      start_period: 30s

  redis:
    # Enhanced Redis configuration for development
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD:-secure_redis_password}",
      "--appendonly", "yes",
      "--save", "60", "1000",
      "--loglevel", "notice",
      "--maxmemory", "512mb",
      "--maxmemory-policy", "allkeys-lru"
    ]
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping", "||", "exit", "1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s

  backend:
    # Development environment overrides
    environment:
      # Enhanced debugging
      - AIVALIDATION_LOG_LEVEL=DEBUG
      - AIVALIDATION_API_DEBUG=true
      - AIVALIDATION_API_RELOAD=true
      - DATABASE_ECHO=true
      # Docker-specific configuration
      - AIVALIDATION_DOCKER_MODE=true
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    # Development volume mounts
    volumes:
      - ./backend:/app
      - ./models:/app/models
      - ./scripts:/app/scripts
      - uploaded_videos:/app/uploads
    # Enhanced startup command with better error handling
    command: [
      "sh", "-c",
      "echo 'Starting backend in development mode...' && 
       echo 'Waiting for database...' && sleep 15 &&
       echo 'Testing database connection...' &&
       python -c 'import sys; sys.path.insert(0, \"/app\"); from database import engine; from sqlalchemy import text; conn = engine.connect(); conn.execute(text(\"SELECT 1\")); conn.close(); print(\"âœ“ Database connection successful\")' &&
       echo 'Starting FastAPI server...' &&
       uvicorn main:socketio_app --host 0.0.0.0 --port 8000 --reload --log-level debug"
    ]
    # Enhanced health check
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health/simple', timeout=10)"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Restart policy for development
    restart: unless-stopped

  frontend:
    # Development environment
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_SOCKETIO_URL=http://localhost:8001
      - REACT_APP_VIDEO_BASE_URL=http://localhost:8000
      - REACT_APP_DEBUG=true
      - REACT_APP_LOG_LEVEL=debug
      - GENERATE_SOURCEMAP=true
      - FAST_REFRESH=true
      - CHOKIDAR_USEPOLLING=true
    # Development health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

# Development-specific network configuration
networks:
  vru_validation_network:
    driver: bridge
    name: vru_validation_network_dev
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: "1500"