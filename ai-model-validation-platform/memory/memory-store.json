{
  "default": [
    {
      "key": "validation-architecture-design",
      "value": "COMPREHENSIVE VALIDATION ARCHITECTURE DESIGN:\n\n## PROBLEM SOLVED: \nPrevents annotation corruption from undefined boundingBox properties that cause frontend crashes\n\n## MULTI-LAYER VALIDATION APPROACH:\n\n### Layer 1: Strict Pydantic Models (/src/validation_models.py)\n- StrictBoundingBox: Ultra-strict validation with NO undefined fields allowed\n- StrictAnnotationCreate/Update: Comprehensive field validation with cross-field rules\n- Custom validators prevent NaN/Infinity/null values\n- Required field enforcement with no defaults for critical fields\n\n### Layer 2: Database Constraints (/src/database_constraints.py)\n- SQL CHECK constraints for JSON schema validation\n- Triggers for complex cross-field validation\n- Range validation for coordinates and timestamps\n- Enum validation for VRU types\n- Performance indexes for validation queries\n\n### Layer 3: Validation Middleware (/src/validation_middleware.py)\n- Request/response interceptor for all annotation endpoints\n- Structured error responses with detailed field-level errors\n- Performance monitoring and metrics collection\n- Comprehensive logging for troubleshooting\n\n### Layer 4: Validation Service (/src/comprehensive_validation_service.py)\n- Multi-layer orchestration pipeline\n- Business logic validation rules\n- Cross-reference validation (video exists, frame bounds)\n- Post-save verification to ensure data integrity\n- Rollback capabilities for failed validations\n- Bulk validation with fail-fast options\n\n### Layer 5: Integration Layer (/src/validation_integration.py)\n- Drop-in replacement for existing endpoints\n- Backward compatibility with existing API contracts\n- Fallback capability to original logic\n- Configuration management for gradual rollout\n\n## VALIDATION PIPELINE FLOW:\n1. Middleware intercepts request\n2. Pydantic models validate structure/types/ranges\n3. Business logic validates domain rules\n4. Cross-references validate data relationships\n5. Database constraints enforce integrity at storage\n6. Post-save verification confirms successful storage\n7. Structured error responses guide debugging\n\n## PREVENTS CORRUPTION BY:\n- Rejecting any annotation with missing x/y/width/height\n- Validating numeric types and ranges\n- Preventing NaN/Infinity/null values\n- Enforcing positive width/height\n- Cross-validating temporal and spatial consistency\n- Database-level constraints as final safeguard\n\n## DEPLOYMENT STRATEGY:\n- Gradual rollout with fallback capability\n- Existing data validation and migration\n- Performance monitoring throughout\n- Zero-downtime deployment with configuration switches\n\n## PERFORMANCE OPTIMIZATIONS:\n- Efficient validation with early exit on errors\n- Bulk validation for batch operations\n- Database index optimization\n- Caching of validation results where applicable\n- Async processing for non-blocking validation\n\nThis architecture completely eliminates the undefined boundingBox problem at its source through multiple validation layers.",
      "namespace": "default",
      "timestamp": 1756241650164
    },
    {
      "key": "unified-fix/docker-status",
      "value": "FIXED: backend/Dockerfile line 63 corrected to use ../scripts/wait-for-services.sh. File exists and docker-compose.unified.yml properly configured with 155.138.239.131 IP support.",
      "namespace": "default",
      "timestamp": 1756274455231
    }
  ]
}