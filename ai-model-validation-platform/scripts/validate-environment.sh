#!/bin/bash\n\n# Environment Validation Script\n# Tests the entire environment configuration system\n\nset -e\n\necho \"🔧 AI Model Validation Platform - Environment Validation\"\necho \"================================================================\"\necho \"\"\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Counters\nTESTS_PASSED=0\nTESTS_FAILED=0\nWARNINGS=0\n\n# Helper functions\nlog_success() {\n    echo -e \"${GREEN}✅ $1${NC}\"\n    ((TESTS_PASSED++))\n}\n\nlog_error() {\n    echo -e \"${RED}❌ $1${NC}\"\n    ((TESTS_FAILED++))\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}⚠️ $1${NC}\"\n    ((WARNINGS++))\n}\n\nlog_info() {\n    echo -e \"${BLUE}ℹ️ $1${NC}\"\n}\n\nlog_header() {\n    echo -e \"\\n${BLUE}🔍 $1${NC}\"\n    echo \"----------------------------------------------------------------\"\n}\n\n# Function to test URL accessibility\ntest_url() {\n    local url=\"$1\"\n    local description=\"$2\"\n    local timeout=${3:-10}\n    \n    if curl -s --connect-timeout $timeout --max-time $timeout \"$url\" > /dev/null; then\n        log_success \"$description: $url\"\n    else\n        log_error \"$description: $url (unreachable)\"\n    fi\n}\n\n# Function to test URL with expected content\ntest_url_content() {\n    local url=\"$1\"\n    local expected=\"$2\"\n    local description=\"$3\"\n    local timeout=${4:-10}\n    \n    local response=$(curl -s --connect-timeout $timeout --max-time $timeout \"$url\" 2>/dev/null || echo \"ERROR\")\n    \n    if [[ \"$response\" == *\"$expected\"* ]]; then\n        log_success \"$description: $url (contains '$expected')\"\n    elif [[ \"$response\" == \"ERROR\" ]]; then\n        log_error \"$description: $url (unreachable)\"\n    else\n        log_warning \"$description: $url (accessible but unexpected content)\"\n    fi\n}\n\n# Check if we're in the right directory\nif [[ ! -f \"frontend/package.json\" ]] || [[ ! -f \"backend/main.py\" ]]; then\n    log_error \"Please run this script from the ai-model-validation-platform root directory\"\n    exit 1\nfi\n\nlog_header \"Environment File Structure\"\n\n# Check frontend environment files\nif [[ -f \"frontend/.env\" ]]; then\n    log_success \"Frontend base config: frontend/.env\"\nelse\n    log_error \"Missing: frontend/.env\"\nfi\n\nif [[ -f \"frontend/.env.development\" ]]; then\n    log_success \"Frontend development config: frontend/.env.development\"\nelse\n    log_error \"Missing: frontend/.env.development\"\nfi\n\nif [[ -f \"frontend/.env.production\" ]]; then\n    log_success \"Frontend production config: frontend/.env.production\"\nelse\n    log_error \"Missing: frontend/.env.production\"\nfi\n\nif [[ -f \"frontend/.env.local.example\" ]]; then\n    log_success \"Frontend local template: frontend/.env.local.example\"\nelse\n    log_warning \"Missing: frontend/.env.local.example (recommended)\"\nfi\n\nif [[ -f \"frontend/.env.local\" ]]; then\n    log_info \"Frontend local overrides: frontend/.env.local (exists)\"\nelse\n    log_info \"Frontend local overrides: frontend/.env.local (not present - OK)\"\nfi\n\n# Check backend environment files\nif [[ -f \"backend/.env\" ]]; then\n    log_success \"Backend base config: backend/.env\"\nelse\n    log_error \"Missing: backend/.env\"\nfi\n\nif [[ -f \"backend/.env.development\" ]]; then\n    log_success \"Backend development config: backend/.env.development\"\nelse\n    log_error \"Missing: backend/.env.development\"\nfi\n\nif [[ -f \"backend/.env.production\" ]]; then\n    log_success \"Backend production config: backend/.env.production\"\nelse\n    log_error \"Missing: backend/.env.production\"\nfi\n\nlog_header \"Environment Configuration Validation\"\n\n# Check frontend environment variables\nif grep -q \"REACT_APP_API_URL=http://localhost:8000\" \"frontend/.env.development\" 2>/dev/null; then\n    log_success \"Development API URL configured correctly\"\nelse\n    log_error \"Development API URL not configured correctly\"\nfi\n\nif grep -q \"REACT_APP_API_URL=http://155.138.239.131:8000\" \"frontend/.env.production\" 2>/dev/null; then\n    log_success \"Production API URL configured correctly\"\nelse\n    log_error \"Production API URL not configured correctly\"\nfi\n\n# Check for required React app variables in development\nrequired_vars=(\"REACT_APP_API_URL\" \"REACT_APP_WS_URL\" \"REACT_APP_SOCKETIO_URL\" \"REACT_APP_VIDEO_BASE_URL\")\nfor var in \"${required_vars[@]}\"; do\n    if grep -q \"^$var=\" \"frontend/.env.development\" 2>/dev/null; then\n        log_success \"Development config has $var\"\n    else\n        log_error \"Development config missing $var\"\n    fi\n    \n    if grep -q \"^$var=\" \"frontend/.env.production\" 2>/dev/null; then\n        log_success \"Production config has $var\"\n    else\n        log_error \"Production config missing $var\"\n    fi\ndone\n\nlog_header \"Backend Services Status\"\n\n# Test localhost endpoints (development)\nlog_info \"Testing development endpoints (localhost)...\"\ntest_url_content \"http://localhost:8000/health\" \"status\" \"API Health Check (localhost)\"\ntest_url \"http://localhost:8001/socket.io/\" \"Socket.IO Server (localhost)\" 5\n\n# Test production endpoints (155.138.239.131)\nlog_info \"Testing production endpoints (155.138.239.131)...\"\ntest_url_content \"http://155.138.239.131:8000/health\" \"status\" \"API Health Check (production)\" 15\ntest_url \"http://155.138.239.131:8001/socket.io/\" \"Socket.IO Server (production)\" 15\n\nlog_header \"Network Connectivity\"\n\n# Test DNS resolution\nif nslookup 155.138.239.131 > /dev/null 2>&1; then\n    log_success \"DNS resolution for 155.138.239.131\"\nelse\n    log_warning \"DNS resolution issue for 155.138.239.131\"\nfi\n\n# Test port connectivity\nif timeout 5 bash -c \"</dev/tcp/localhost/8000\" 2>/dev/null; then\n    log_success \"Port 8000 accessible on localhost\"\nelse\n    log_warning \"Port 8000 not accessible on localhost (backend may not be running)\"\nfi\n\nif timeout 10 bash -c \"</dev/tcp/155.138.239.131/8000\" 2>/dev/null; then\n    log_success \"Port 8000 accessible on 155.138.239.131\"\nelse\n    log_warning \"Port 8000 not accessible on 155.138.239.131 (may be expected)\"\nfi\n\nlog_header \"Frontend Dependencies\"\n\n# Check if Node.js and npm are available\nif command -v node > /dev/null 2>&1; then\n    NODE_VERSION=$(node --version)\n    log_success \"Node.js available: $NODE_VERSION\"\nelse\n    log_error \"Node.js not found\"\nfi\n\nif command -v npm > /dev/null 2>&1; then\n    NPM_VERSION=$(npm --version)\n    log_success \"npm available: $NPM_VERSION\"\nelse\n    log_error \"npm not found\"\nfi\n\n# Check if frontend dependencies are installed\nif [[ -d \"frontend/node_modules\" ]]; then\n    log_success \"Frontend dependencies installed\"\nelse\n    log_warning \"Frontend dependencies not installed (run: cd frontend && npm install)\"\nfi\n\nlog_header \"Backend Dependencies\"\n\n# Check if Python is available\nif command -v python > /dev/null 2>&1; then\n    PYTHON_VERSION=$(python --version 2>&1)\n    log_success \"Python available: $PYTHON_VERSION\"\nelif command -v python3 > /dev/null 2>&1; then\n    PYTHON_VERSION=$(python3 --version)\n    log_success \"Python available: $PYTHON_VERSION\"\nelse\n    log_error \"Python not found\"\nfi\n\n# Check if pip is available\nif command -v pip > /dev/null 2>&1; then\n    log_success \"pip available\"\nelif command -v pip3 > /dev/null 2>&1; then\n    log_success \"pip3 available\"\nelse\n    log_warning \"pip not found\"\nfi\n\n# Check for requirements.txt\nif [[ -f \"backend/requirements.txt\" ]]; then\n    log_success \"Backend requirements file exists\"\nelse\n    log_error \"Backend requirements.txt not found\"\nfi\n\nlog_header \"File Structure Validation\"\n\n# Check critical directories and files\ncritical_files=(\n    \"frontend/src/utils/envConfig.ts\"\n    \"frontend/src/utils/videoUtils.ts\"\n    \"frontend/src/components/ConfigurationValidator.tsx\"\n    \"frontend/src/services/api.ts\"\n    \"frontend/src/hooks/useWebSocket.ts\"\n    \"docs/ENVIRONMENT_SETUP.md\"\n    \"docs/TROUBLESHOOTING_GUIDE.md\"\n)\n\nfor file in \"${critical_files[@]}\"; do\n    if [[ -f \"$file\" ]]; then\n        log_success \"Critical file exists: $file\"\n    else\n        log_error \"Missing critical file: $file\"\n    fi\ndone\n\n# Check for upload directories\nif [[ -d \"backend/uploads\" ]]; then\n    log_success \"Backend uploads directory exists\"\n    UPLOAD_COUNT=$(find backend/uploads -type f -name \"*.mp4\" 2>/dev/null | wc -l)\n    if [[ $UPLOAD_COUNT -gt 0 ]]; then\n        log_info \"Found $UPLOAD_COUNT video files in uploads\"\n    else\n        log_info \"No video files in uploads directory\"\n    fi\nelse\n    log_warning \"Backend uploads directory not found (will be created on first upload)\"\nfi\n\nlog_header \"Documentation\"\n\n# Check documentation files\ndoc_files=(\"docs/ENVIRONMENT_SETUP.md\" \"docs/TROUBLESHOOTING_GUIDE.md\" \"README.md\")\nfor doc in \"${doc_files[@]}\"; do\n    if [[ -f \"$doc\" ]]; then\n        log_success \"Documentation exists: $doc\"\n    else\n        log_error \"Missing documentation: $doc\"\n    fi\ndone\n\nlog_header \"Security Check\"\n\n# Check for .env.local in git (should be ignored)\nif git check-ignore \"frontend/.env.local\" > /dev/null 2>&1; then\n    log_success \"frontend/.env.local is git-ignored\"\nelse\n    log_warning \"frontend/.env.local should be added to .gitignore\"\nfi\n\nif git check-ignore \"backend/.env.local\" > /dev/null 2>&1; then\n    log_success \"backend/.env.local is git-ignored\"\nelse\n    log_warning \"backend/.env.local should be added to .gitignore\"\nfi\n\n# Check for hardcoded secrets (basic check)\nif grep -r \"SECRET_KEY.*=.*development\" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null; then\n    log_warning \"Found development secret keys in tracked files\"\nelse\n    log_success \"No obvious hardcoded secrets found\"\nfi\n\nlog_header \"Summary\"\n\necho \"\"\necho \"================================================================\"\necho \"📊 Test Results Summary:\"\necho \"----------------------------------------------------------------\"\necho -e \"${GREEN}✅ Tests Passed: $TESTS_PASSED${NC}\"\necho -e \"${RED}❌ Tests Failed: $TESTS_FAILED${NC}\"\necho -e \"${YELLOW}⚠️  Warnings: $WARNINGS${NC}\"\necho \"\"\n\nif [[ $TESTS_FAILED -eq 0 ]]; then\n    echo -e \"${GREEN}🎉 Environment validation completed successfully!${NC}\"\n    echo -e \"${GREEN}All critical components are properly configured.${NC}\"\n    echo \"\"\n    echo \"Next steps:\"\n    echo \"1. Start backend: cd backend && python main.py\"\n    echo \"2. Start frontend: cd frontend && npm start\"\n    echo \"3. Open http://localhost:3000 and check Configuration Validator\"\nelse\n    echo -e \"${RED}🚨 Environment validation found issues!${NC}\"\n    echo -e \"${RED}Please review the failed tests above and fix the issues.${NC}\"\n    echo \"\"\n    echo \"Common fixes:\"\n    echo \"1. Install missing dependencies\"\n    echo \"2. Create missing environment files\"\n    echo \"3. Start required services (backend, database)\"\n    echo \"4. Check network connectivity\"\nfi\n\necho \"\"\necho \"📚 For detailed setup instructions: docs/ENVIRONMENT_SETUP.md\"\necho \"🔧 For troubleshooting help: docs/TROUBLESHOOTING_GUIDE.md\"\necho \"================================================================\"\n\n# Exit with appropriate code\nif [[ $TESTS_FAILED -eq 0 ]]; then\n    exit 0\nelse\n    exit 1\nfi