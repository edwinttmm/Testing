# Production Environment Configuration
ENVIRONMENT=production
NODE_ENV=production
APP_ENV=production

# Database - PostgreSQL for production (155.138.239.131)
DATABASE_TYPE=postgresql
DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@155.138.239.131:5432/vru_validation
AIVALIDATION_DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@155.138.239.131:5432/vru_validation
POSTGRES_DB=vru_validation
POSTGRES_USER=postgres
POSTGRES_PASSWORD=CHANGE_ME_SECURE_PRODUCTION_PASSWORD

# PostgreSQL Optimization
POSTGRES_MAX_CONNECTIONS=200
POSTGRES_SHARED_BUFFERS=256MB
POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
POSTGRES_MAINTENANCE_WORK_MEM=64MB
POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.7
POSTGRES_WAL_BUFFERS=16MB
POSTGRES_DEFAULT_STATISTICS_TARGET=100
POSTGRES_RANDOM_PAGE_COST=1.1
POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
POSTGRES_WORK_MEM=4MB
POSTGRES_MIN_WAL_SIZE=1GB
POSTGRES_MAX_WAL_SIZE=4GB
POSTGRES_LOG_STATEMENT=none
POSTGRES_LOG_DESTINATION=stderr
POSTGRES_LOGGING_COLLECTOR=off

# Redis Configuration
REDIS_PASSWORD=CHANGE_ME_SECURE_REDIS_PASSWORD
REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
AIVALIDATION_REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
REDIS_APPENDFSYNC=everysec
REDIS_MAXMEMORY=512mb
REDIS_MAXMEMORY_POLICY=allkeys-lru

# API Configuration - CHANGE THESE FOR PRODUCTION
AIVALIDATION_SECRET_KEY=GENERATE_SECURE_32_CHAR_KEY_FOR_PRODUCTION
JWT_SECRET_KEY=GENERATE_SECURE_JWT_KEY_FOR_PRODUCTION
ENCRYPTION_KEY=GENERATE_SECURE_ENCRYPTION_KEY_FOR_PRODUCTION
AIVALIDATION_API_HOST=0.0.0.0
AIVALIDATION_API_PORT=8000
API_PORT=8000

# CORS - CUSTOMIZE FOR YOUR DOMAIN
AIVALIDATION_CORS_ORIGINS=["https://yourdomain.com","https://api.yourdomain.com"]
ALLOWED_ORIGINS=["https://yourdomain.com","https://api.yourdomain.com"]

# Frontend URLs - CUSTOMIZE FOR YOUR DOMAIN
REACT_APP_API_URL=https://api.yourdomain.com
REACT_APP_WS_URL=wss://api.yourdomain.com
REACT_APP_SOCKETIO_URL=https://api.yourdomain.com
REACT_APP_VIDEO_BASE_URL=https://api.yourdomain.com
REACT_APP_ENVIRONMENT=production
REACT_APP_DEBUG=false
REACT_APP_LOG_LEVEL=error

# Performance - Multiple workers for production
UVICORN_WORKERS=4
UVICORN_WORKER_TIMEOUT=300

# Docker Production Settings
AIVALIDATION_DOCKER_MODE=true
DOCKER=true
CI=true

# Logging
LOG_LEVEL=WARNING
GENERATE_SOURCEMAP=false

# Docker Compose Profiles
COMPOSE_PROFILES=production,postgresql,nginx,monitoring

# Production Volume Mounts (read-only where possible)
BACKEND_MOUNT_MODE=:ro
FRONTEND_MOUNT_MODE=:ro
SQLITE_MOUNT_MODE=:ro

# Build Targets
DOCKER_BUILD_TARGET=production
FRONTEND_BUILD_TARGET=production

# Health Check Intervals
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=60s
FRONTEND_HEALTH_CHECK_INTERVAL=30s
FRONTEND_HEALTH_CHECK_TIMEOUT=10s
FRONTEND_HEALTH_CHECK_RETRIES=3
FRONTEND_HEALTH_CHECK_START_PERIOD=60s

# Resource Limits - Production
BACKEND_CPU_LIMIT=2.0
BACKEND_MEMORY_LIMIT=2G
BACKEND_CPU_RESERVATION=1.0
BACKEND_MEMORY_RESERVATION=1G

FRONTEND_CPU_LIMIT=1.0
FRONTEND_MEMORY_LIMIT=1G
FRONTEND_CPU_RESERVATION=0.5
FRONTEND_MEMORY_RESERVATION=512M

POSTGRES_CPU_LIMIT=2.0
POSTGRES_MEMORY_LIMIT=2G
POSTGRES_CPU_RESERVATION=1.0
POSTGRES_MEMORY_RESERVATION=1G

REDIS_CPU_LIMIT=1.0
REDIS_MEMORY_LIMIT=512M
REDIS_CPU_RESERVATION=0.5
REDIS_MEMORY_RESERVATION=256M

# Ports - Production (internal only, nginx handles external)
BACKEND_PORT=127.0.0.1:8000
FRONTEND_PORT=127.0.0.1:3000
POSTGRES_PORT=127.0.0.1:5432
REDIS_PORT=127.0.0.1:6379
HTTP_PORT=80
HTTPS_PORT=443
PROMETHEUS_PORT=127.0.0.1:9090

# Network Configuration
DOCKER_SUBNET=172.20.0.0/16
DOCKER_GATEWAY=172.20.0.1
DOCKER_MTU=1500

# Production Features
CVAT_ENABLED=true
CVAT_POSTGRES_PASSWORD=CHANGE_ME_SECURE_CVAT_PASSWORD
CVAT_PORT=127.0.0.1:8080

# CVAT Resource Limits
CVAT_CPU_LIMIT=2.0
CVAT_MEMORY_LIMIT=2G
CVAT_CPU_RESERVATION=1.0
CVAT_MEMORY_RESERVATION=1G
CVAT_DB_CPU_LIMIT=1.0
CVAT_DB_MEMORY_LIMIT=1G
CVAT_DB_CPU_RESERVATION=0.5
CVAT_DB_MEMORY_RESERVATION=512M

# Restart Policy
RESTART_POLICY=always

# Commands - Production with proper process management
BACKEND_COMMAND=["./scripts/wait-for-services.sh", "uvicorn", "main:socketio_app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--access-log", "--log-level", "warning"]