version: '3.8'

# Docker Compose configuration for SQLite development with working database
# This configuration uses the existing dev_database.db with all working data
# Usage: docker-compose -f docker-compose.yml -f docker-compose.sqlite.yml up

services:
  # FastAPI Backend with SQLite
  backend:
    environment:
      # Override database configuration to use SQLite
      - AIVALIDATION_DATABASE_URL=sqlite:///./dev_database.db
      - DATABASE_URL=sqlite:///./dev_database.db
      # Disable PostgreSQL-specific configurations
      - AIVALIDATION_DATABASE_POOL_SIZE=1
      - AIVALIDATION_DATABASE_MAX_OVERFLOW=0
    volumes:
      # Mount the working SQLite database for persistence across container restarts
      - ./backend/dev_database.db:/app/dev_database.db:rw
      # Mount backup databases for safety
      - ./backend/dev_database.db.backup_20250826_193443:/app/dev_database.db.backup:ro
    depends_on:
      # Remove PostgreSQL dependency for SQLite mode
      redis:
        condition: service_healthy
    command: [
      "sh", "-c",
      "echo 'Docker SQLite Integration: Using dev_database.db (704KB, 6 projects, 1 video, 1 annotation)' && 
       echo 'Database file permissions:' && ls -la /app/dev_database.db &&
       python -c 'import sqlite3; conn = sqlite3.connect(\"/app/dev_database.db\"); print(f\"Tables: {[r[0] for r in conn.execute(\"SELECT name FROM sqlite_master WHERE type=\\\"table\\\"\").fetchall()]}\"); conn.close()' &&
       python -c 'import database; print(\"âœ… Database connection test passed\")' && 
       uvicorn main:socketio_app --host 0.0.0.0 --port 8000 --reload"
    ]

  # Keep Redis for caching and session management
  redis:
    # Redis configuration remains the same

# Remove PostgreSQL service entirely for SQLite mode
# Override the postgres service to prevent it from starting
  postgres:
    # Disable PostgreSQL service by overriding with a minimal placeholder
    image: hello-world
    command: ["echo", "PostgreSQL disabled for SQLite mode"]
    depends_on: []
    healthcheck:
      test: ["CMD", "echo", "postgres disabled"]
      interval: 5s
      timeout: 1s
      retries: 1
    restart: "no"

  # CVAT database - also disable for development
  cvat_db:
    image: hello-world  
    command: ["echo", "CVAT DB disabled for SQLite development mode"]
    depends_on: []
    healthcheck:
      test: ["CMD", "echo", "cvat_db disabled"]
      interval: 5s
      timeout: 1s
      retries: 1
    restart: "no"

volumes:
  # Remove PostgreSQL volume for SQLite mode
  postgres_data: null
  cvat_db: null
  # Keep other volumes
  redis_data:
  uploaded_videos:
  cvat_data:
  cvat_keys:
  cvat_logs: