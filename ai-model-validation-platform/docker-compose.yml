services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ai_validation_postgres
    hostname: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vru_validation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vru_validation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-vru_validation}"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "log_destination=stderr",
      "-c", "logging_collector=off",
      "-c", "max_connections=200"
    ]

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai_validation_redis
    hostname: redis
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vru_validation_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password} --appendonly yes

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: ai_validation_backend
    hostname: backend
    ports:
      - "0.0.0.0:8000:8000"
    environment:
      # Security
      - AIVALIDATION_SECRET_KEY=${AIVALIDATION_SECRET_KEY:-GENERATE_SECURE_KEY_FOR_PRODUCTION}
      # Database
      - AIVALIDATION_DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-vru_validation}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-vru_validation}
      # Redis
      - AIVALIDATION_REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      # API Configuration
      - AIVALIDATION_API_PORT=8000
      - AIVALIDATION_API_HOST=0.0.0.0
      - AIVALIDATION_APP_ENVIRONMENT=${APP_ENV:-development}
      # CORS Configuration for External IP Access
      - AIVALIDATION_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://155.138.239.131:3000
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://155.138.239.131:3000
      # Legacy support
      - API_PORT=8000
      # Docker configuration
      - AIVALIDATION_DOCKER_MODE=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vru_validation_network
    volumes:
      - ./backend:/app
      - ./models:/app/models
      - uploaded_videos:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: [
      "sh", "-c",
      "echo 'Waiting for database...' && sleep 10 && python -c 'import database; print(\"Database connection test passed\")' && uvicorn main:socketio_app --host 0.0.0.0 --port 8000 --reload"
    ]

  # React Frontend
  frontend:
    build: ./frontend
    container_name: ai_validation_frontend
    hostname: frontend
    ports:
      - "0.0.0.0:3000:3000"
    environment:
      - REACT_APP_API_URL=http://155.138.239.131:8000
      - REACT_APP_WS_URL=ws://155.138.239.131:8000
      - REACT_APP_SOCKETIO_URL=http://155.138.239.131:8001
      - REACT_APP_VIDEO_BASE_URL=http://155.138.239.131:8000
      - REACT_APP_ENVIRONMENT=${APP_ENV:-development}
      - REACT_APP_DEBUG=${REACT_DEBUG:-false}
      - REACT_APP_LOG_LEVEL=${REACT_LOG_LEVEL:-warning}
      - NODE_ENV=${NODE_ENV:-development}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP:-false}
      - CI=true
      - DOCKER=true
      - NODE_OPTIONS=--max_old_space_size=4096
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - vru_validation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # CVAT for annotation (optional, can be deployed separately)
  cvat_db:
    image: postgres:15
    container_name: ai_validation_cvat_db
    hostname: cvat_db
    environment:
      POSTGRES_DB: cvat
      POSTGRES_USER: root
      POSTGRES_PASSWORD: cvat_password
    volumes:
      - cvat_db:/var/lib/postgresql/data
    networks:
      - vru_validation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d cvat"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cvat:
    image: openvino/cvat_server:latest
    container_name: ai_validation_cvat
    hostname: cvat
    restart: always
    depends_on:
      cvat_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CVAT_REDIS_HOST: redis
      CVAT_POSTGRES_HOST: cvat_db
      CVAT_POSTGRES_PASSWORD: cvat_password
      DJANGO_MODWSGI_EXTRA_ARGS: ""
    ports:
      - "0.0.0.0:8080:8080"
    networks:
      - vru_validation_network
    volumes:
      - cvat_data:/home/django/data
      - cvat_keys:/home/django/keys
      - cvat_logs:/home/django/logs

volumes:
  postgres_data:
  redis_data:
  uploaded_videos:
  cvat_db:
  cvat_data:
  cvat_keys:
  cvat_logs:

networks:
  vru_validation_network:
    driver: bridge
    name: vru_validation_network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"